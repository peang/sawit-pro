openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /estate:
    post:
      summary: Creates and stores a new estate in the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EstateRequest"
      responses:
        "201":
          description: Successful creation of the estate.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EstateResponse"
        "400":
          description: Invalid value or format received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /estate/{id}/tree:
    post:
      summary: Store tree data in a given estate
      parameters:
        - $ref: "#/components/parameters/EstateIDPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TreeRequest"
      responses:
        "201":
          description: Successful add tree to estate.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TreeResponse"
        "400":
          description: Invalid value or format received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: State not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /estate/{id}/stats:
    get:
      summary: Retrieve stats of trees in a given estate.
      parameters:
        - $ref: "#/components/parameters/EstateIDPathParam"
      responses:
        "200":
          description: Stats of the trees in the estate.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EstateStatsResponse"
        "404":
          description: Estate not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /estate/{id}/drone-plan:
    get:
      summary: Retrieve the sum distance of drone monitoring travel in a given estate.
      parameters:
        - $ref: "#/components/parameters/EstateIDPathParam"
        - name: max_distance
          in: query
          description: Maximum distance for drone monitoring travel.
          schema:
            type: integer
            minimum: 1
            maximum: 10000 # Adjust the maximum value as needed
      responses:
        "200":
          description: Sum distance of drone monitoring travel in the estate.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DronePlanResponse"
        "404":
          description: Estate not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  parameters:
    EstateIDPathParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: ID of the estate where the resource will be stored

  schemas:
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    EstateRequest:
      type: object
      required:
        - length
        - width
      properties:
        width:
          type: integer
          minimum: 1
          maximum: 50000
        length:
          type: integer
          minimum: 1
          maximum: 50000
    EstateResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    TreeRequest:
      type: object
      required:
        - x
        - y
        - height
      properties:
        x:
          type: integer
          minimum: 1
          maximum: 50000
        y:
          type: integer
          minimum: 1
          maximum: 50000
        height:
          type: integer
          minimum: 1
          maximum: 30
    TreeResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    EstateStatsResponse:
      type: object
      required:
        - count
        - max
        - min
        - median
      properties:
        count:
          type: integer
        max:
          type: integer
        min:
          type: integer
        median:
          type: integer
    DronePlanResponse:
      type: object
      required:
        - distance
      properties:
        distance:
          type: integer
        rest: 
         $ref: "#/components/schemas/DroneRestResponse"
    DroneRestResponse:
      type: object
      properties:
        x: 
          type: integer
        y: 
          type: integer

