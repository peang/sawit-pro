// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=repository/interfaces.go -destination=repository/interfaces.mock.gen.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	models "github.com/SawitProRecruitment/UserService/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetEstate mocks base method.
func (m *MockRepositoryInterface) GetEstate(ctx context.Context, uuid string) (*models.Estate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstate", ctx, uuid)
	ret0, _ := ret[0].(*models.Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEstate indicates an expected call of GetEstate.
func (mr *MockRepositoryInterfaceMockRecorder) GetEstate(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).GetEstate), ctx, uuid)
}

// GetTreeByCoordinate mocks base method.
func (m *MockRepositoryInterface) GetTreeByCoordinate(ctx context.Context, estateId uint64, x, y uint16) (*models.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreeByCoordinate", ctx, estateId, x, y)
	ret0, _ := ret[0].(*models.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTreeByCoordinate indicates an expected call of GetTreeByCoordinate.
func (mr *MockRepositoryInterfaceMockRecorder) GetTreeByCoordinate(ctx, estateId, x, y any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreeByCoordinate", reflect.TypeOf((*MockRepositoryInterface)(nil).GetTreeByCoordinate), ctx, estateId, x, y)
}

// GetTreesByEstate mocks base method.
func (m *MockRepositoryInterface) GetTreesByEstate(ctx context.Context, estateId uint64) (*[]models.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreesByEstate", ctx, estateId)
	ret0, _ := ret[0].(*[]models.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTreesByEstate indicates an expected call of GetTreesByEstate.
func (mr *MockRepositoryInterfaceMockRecorder) GetTreesByEstate(ctx, estateId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreesByEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).GetTreesByEstate), ctx, estateId)
}

// SaveEstate mocks base method.
func (m *MockRepositoryInterface) SaveEstate(ctx context.Context, estate *models.Estate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEstate", ctx, estate)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEstate indicates an expected call of SaveEstate.
func (mr *MockRepositoryInterfaceMockRecorder) SaveEstate(ctx, estate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).SaveEstate), ctx, estate)
}

// SaveTree mocks base method.
func (m *MockRepositoryInterface) SaveTree(ctx context.Context, tree *models.Tree) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTree", ctx, tree)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTree indicates an expected call of SaveTree.
func (mr *MockRepositoryInterfaceMockRecorder) SaveTree(ctx, tree any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTree", reflect.TypeOf((*MockRepositoryInterface)(nil).SaveTree), ctx, tree)
}
